import os
import json
import logging
from typing import Any, Dict

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def read_file(file_path: str) -> str:
    if not os.path.isfile(file_path):
        logger.error(f"File '{file_path}' not found.")
        raise FileNotFoundError(f"File '{file_path}' not found.")
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except IOError as e:
        logger.error(f"Error reading file '{file_path}': {e}")
        raise

def write_file(file_path: str, content: str) -> None:
    try:
        with open(file_path, 'w', encoding='utf-8') as file:
            file.write(content)
    except IOError as e:
        logger.error(f"Error writing file '{file_path}': {e}")
        raise

def validate_path(path: str) -> bool:
    is_valid = os.path.isdir(path)
    if not is_valid:
        logger.warning(f"Path '{path}' is not a valid directory.")
    return is_valid

def format_error_message(message: str) -> str:
    return f"ERROR: {message}"

def load_json(file_path: str) -> Dict[str, Any]:
    if not os.path.isfile(file_path):
        logger.error(f"JSON file '{file_path}' not found.")
        raise FileNotFoundError(f"JSON file '{file_path}' not found.")
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except json.JSONDecodeError as e:
        logger.error(f"Error decoding JSON file '{file_path}': {e}")
        raise
    except IOError as e:
        logger.error(f"Error reading JSON file '{file_path}': {e}")
        raise

def save_json(file_path: str, data: Dict[str, Any]) -> None:
    try:
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(data, file, indent=4)
    except IOError as e:
        logger.error(f"Error saving JSON data to '{file_path}': {e}")
        raise

def ensure_directory_exists(directory_path: str) -> None:
    if not os.path.isdir(directory_path):
        try:
            os.makedirs(directory_path)
            logger.info(f"Directory '{directory_path}' created.")
        except OSError as e:
            logger.error(f"Error creating directory '{directory_path}': {e}")
            raise

def sanitize_filename(filename: str) -> str:
    invalid_chars = '<>:"/\\|?*'
    return ''.join(c for c in filename if c not in invalid_chars)

def get_file_extension(file_path: str) -> str:
    _, extension = os.path.splitext(file_path)
    return extension
